from dandi.dandiapi import DandiAPIClient
from fsspec.implementations.cached import CachingFileSystem
from fsspec import filesystem
from h5py import File
from pynwb import NWBHDF5IO
import matplotlib.pyplot as plt
import h5py
import numpy as np
import pandas as pd
from scipy.signal import decimate
from utils import *

dandiset_id = "000019"
file_path   = 'sub-EC2/sub-EC2_ses-EC2-B89.nwb'
nwbfile     = load_nwbfile(dandiset_id,file_path)

nwbfile.trials.to_dataframe()

#%%
# Identify bad channels
electrodes   = nwbfile.electrodes.to_dataframe()
bad_indicies = np.where(electrodes['bad'] == True)

lfp = nwbfile.acquisition['ElectricalSeries'].data[:,:].T

# make a time vector based on the Fs of 3052


Fs   = nwbfile.acquisition['ElectricalSeries'].rate
T    = (lfp.shape[1]/Fs)+20 # Duration in seconds
time = np.arange(0, T, 1/Fs)

# truncate time to the length of lfp ont he first dim
time = time[:lfp.shape[1]]


# get the trial strucutre
trials = nwbfile.trials.to_dataframe()
df     = pd.DataFrame(columns=['lfp','transition_time','condition'])

for itrial in np.arange(trials.shape[0]):
    best_fit_start      = np.abs(time - trials.start_time.iloc[itrial])
    best_fit_end        = np.abs(time - trials.stop_time.iloc[itrial])
    best_fit_transition = np.abs(time - trials.cv_transition_time.iloc[itrial])
    # find the index of start and stop
    start_idx = np.argmin(best_fit_start)
    end_idx   = np.argmin(best_fit_end)
    transition_idx = np.argmin(best_fit_transition) - start_idx # relative to onset

    # epoch the data
    trial = lfp[:,start_idx:end_idx]

    # make dict
    mydict = {'lfp':trial, 'transition_time':transition_idx,'condition':trials.condition.iloc[itrial]}

    # append to df
    df = df.append(mydict,ignore_index=True)


# save the df to disk
df.to_pickle()